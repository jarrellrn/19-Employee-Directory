{"version":3,"sources":["components/Navbar.jsx","components/EmployeeTable.jsx","App.js","serviceWorker.js","index.js"],"names":["navStyle","textAlign","fontSize","color","marginBottom","Navbar","className","style","tableStyle","display","alignItems","justifyContent","EmployeeTable","props","state","items","loading","fetch","then","response","json","setState","results","this","Table","striped","bordered","hover","map","item","src","picture","medium","alt","name","first","location","street","number","last","email","city","Component","App","rootElement","document","getElementById","ReactDOM","render","Boolean","window","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAEMA,EAAW,CACfC,UAAW,SACXC,SAAU,GACVC,MAAO,OACPC,aAAc,IAaDC,MAVf,WACE,OACE,yBAAKC,UAAU,mDACb,yBAAKA,UAAU,eAAeC,MAAOP,GAArC,wB,wCCTAQ,EAAa,CACjBC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBR,MAAO,QAgEMS,E,kDA5Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,SAAS,GAJM,E,gEAQE,IAAD,OAClBC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OACJ,EAAKE,SAAS,CACZN,MAAOI,EAASG,QAChBN,SAAS,S,+BAKP,IAAD,EACkBO,KAAKT,MAAxBC,EADC,EACDA,MACN,OAFO,EACMC,QAKT,yBAAKV,UAAU,YAAYC,MAAOC,GAChC,kBAACgB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,uCACA,kCACA,oCACA,qCACA,0CAGHZ,EAAMa,KAAI,SAACC,GAAD,OACT,+BACE,4BACE,4BACE,yBAAKC,IAAKD,EAAKE,QAAQC,OAAQC,IAAKJ,EAAKK,KAAKC,SAEhD,4BAAKN,EAAKO,SAASC,OAAOC,QAC1B,4BACGT,EAAKK,KAAKC,MADb,OAC0BN,EAAKK,KAAKK,MAEpC,4BAAKV,EAAKW,OACV,4BACGX,EAAKO,SAASK,KADjB,QAC8BZ,EAAKO,SAAStB,cA1BjD,+E,GAvBe4B,aCH5B,SAASC,IACP,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAKN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GAEVD,QCnBKM,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCANL,IAASC,OACP,kBAAC,IAAMK,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASC,eAAe,SD6GpB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAACuC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9dee56c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst navStyle = {\r\n  textAlign: \"center\",\r\n  fontSize: 40,\r\n  color: \"#666\",\r\n  marginBottom: 10,\r\n};\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg  justify-content-center\">\r\n      <div className=\"navbar-brand\" style={navStyle}>\r\n        Employee Directory\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst tableStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  color: \"#666\",\r\n};\r\n\r\nclass EmployeeTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://randomuser.me/api/?results=20\")\r\n      .then((response) => response.json())\r\n      .then((response) =>\r\n        this.setState({\r\n          items: response.results,\r\n          loading: true,\r\n        })\r\n      );\r\n  }\r\n\r\n  render() {\r\n    var { items, loading } = this.state;\r\n    if (!loading) {\r\n      return <div>Currently loading, may take a few moments.</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"container\" style={tableStyle}>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Picture</th>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Location</th>\r\n              </tr>\r\n            </thead>\r\n            {items.map((item) => (\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <img src={item.picture.medium} alt={item.name.first} />\r\n                  </td>\r\n                  <td>{item.location.street.number}</td>\r\n                  <td>\r\n                    {item.name.first}&nbsp;{item.name.last}\r\n                  </td>\r\n                  <td>{item.email}</td>\r\n                  <td>\r\n                    {item.location.city},&nbsp;{item.location.state}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            ))}\r\n          </Table>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar.jsx\";\nimport EmployeeTable from \"./components/EmployeeTable.jsx\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <EmployeeTable />\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}