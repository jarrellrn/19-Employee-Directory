{"version":3,"sources":["logo.svg","components/Navbar.jsx","components/EmployeeTable.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","navbar","css","Navbar","className","arrow","EmployeeTable","props","state","items","loading","search","onSort","bind","fetch","then","response","json","setState","results","event","sortKey","this","sort","a","b","name","last","localeCompare","email","target","value","substr","filteredEmployees","filter","first","toLowerCase","indexOf","htmlFor","id","onChange","updateSearch","type","placeholder","Table","responsive","striped","bordered","hover","onClick","e","map","item","src","picture","medium","alt","location","street","number","city","Component","App","rootElement","document","getElementById","ReactDOM","render","Boolean","window","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f8abae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { css } from \"emotion\";\r\n\r\nconst navbar = css`\r\n  .navbar {\r\n    color: white;\r\n    background-color: #323741;\r\n    border-bottom: 3px solid #a60311;\r\n    height: 10rem;\r\n  }\r\n  .navbar-brand {\r\n    font-size: xx-large;\r\n  }\r\n`;\r\n\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction Navbar() {\r\n  return (\r\n    <div className={navbar}>\r\n      <nav className=\"navbar navbar-expand-lg  justify-content-center\">\r\n        <div className=\"navbar-brand\">Employee Directory</div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { css } from \"emotion\";\r\n\r\nconst arrow = css`\r\n    background-color: Transparent;\r\n    background-repeat:no-repeat;\r\n    border: none;\r\n    outline: none\r\n    cursor:pointer;\r\n    overflow: hidden;      \r\n`;\r\n\r\nclass EmployeeTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      loading: false,\r\n      search: \"\",\r\n    };\r\n    this.onSort = this.onSort.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://randomuser.me/api/?results=20\")\r\n      .then((response) => response.json())\r\n      .then((response) =>\r\n        this.setState({\r\n          items: response.results,\r\n          loading: true,\r\n        })\r\n      );\r\n  }\r\n\r\n  onSort(event, sortKey) {\r\n    const items = this.state.items;\r\n    switch (sortKey) {\r\n      case \"name.lastAsc\":\r\n        items.sort((a, b) => a.name.last.localeCompare(b.name.last));\r\n        break;\r\n      default:\r\n        break;\r\n      case \"name.lastDesc\":\r\n        items.sort((b, a) => a.name.last.localeCompare(b.name.last));\r\n        break;\r\n      case \"emailAsc\":\r\n        items.sort((a, b) => a.email.localeCompare(b.email));\r\n        break;\r\n      case \"emailDesc\":\r\n        items.sort((b, a) => a.email.localeCompare(b.email));\r\n        break;\r\n    }\r\n    this.setState({ items });\r\n  }\r\n\r\n  updateSearch(event) {\r\n    this.setState({ search: event.target.value.substr(0, 20) });\r\n  }\r\n\r\n  render() {\r\n    var { items, loading } = this.state;\r\n    if (!loading) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      let filteredEmployees = items.filter((items) => {\r\n        return (\r\n          items.name.first\r\n            .toLowerCase()\r\n            .indexOf(this.state.search.toLowerCase()) !== -1\r\n        );\r\n      });\r\n      return (\r\n        <div className=\"container\">\r\n          <form className=\"search\">\r\n            <div className=\"form-inline justify-content-center\">\r\n              <label htmlFor=\"language\" id=\"formLabel\">\r\n                Find Employee:&nbsp;\r\n              </label>\r\n              <input\r\n                value={this.state.search}\r\n                onChange={this.updateSearch.bind(this)}\r\n                name=\"search\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Type to start searching\"\r\n                id=\"nameInput\"\r\n              />\r\n              &nbsp;\r\n              {/*<button id=\"searchButton\" type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\r\n                    Search\r\n                    </button>*/}\r\n            </div>\r\n            <br />\r\n            <br />\r\n          </form>\r\n          <Table responsive striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Picture</th>\r\n                <th>ID #</th>\r\n                <th>\r\n                  Name&nbsp;\r\n                  <button\r\n                    className={arrow}\r\n                    onClick={(e) => this.onSort(e, \"name.lastAsc\")}\r\n                  >\r\n                    <i className=\"fas fa-sort-alpha-down\"></i>\r\n                  </button>\r\n                  <button\r\n                    className={arrow}\r\n                    onClick={(e) => this.onSort(e, \"name.lastDesc\")}\r\n                  >\r\n                    <i className=\"fas fa-sort-alpha-down-alt\"></i>\r\n                  </button>\r\n                </th>\r\n                <th>\r\n                  Email&nbsp;\r\n                  <button\r\n                    className={arrow}\r\n                    onClick={(e) => this.onSort(e, \"emailAsc\")}\r\n                  >\r\n                    <i className=\"fas fa-sort-alpha-down\"></i>\r\n                  </button>\r\n                  <button\r\n                    className={arrow}\r\n                    onClick={(e) => this.onSort(e, \"emailDesc\")}\r\n                  >\r\n                    <i className=\"fas fa-sort-alpha-down-alt\"></i>\r\n                  </button>\r\n                </th>\r\n                <th>Location (City, State)</th>\r\n              </tr>\r\n            </thead>\r\n            {filteredEmployees.map((item) => (\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <img src={item.picture.medium} alt={item.name.first} />\r\n                  </td>\r\n                  <td>{item.location.street.number}</td>\r\n                  <td>\r\n                    {item.name.first}&nbsp;{item.name.last}\r\n                  </td>\r\n                  <td>{item.email}</td>\r\n                  <td>\r\n                    {item.location.city},&nbsp;{item.location.state}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            ))}\r\n          </Table>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar.jsx\";\nimport EmployeeTable from \"./components/EmployeeTable.jsx\";\nimport Footer from \"./components/Footer.jsx\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <EmployeeTable />\n      <Footer />\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}